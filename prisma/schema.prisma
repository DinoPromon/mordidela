generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model adicional {
  id_adicional             Int                        @id @default(autoincrement()) @db.UnsignedInt
  nome                     String                     @db.VarChar(100)
  preco                    Float                      @db.Float
  pedido_produto_adicional pedido_produto_adicional[]
  produto_adicional        produto_adicional[]
}

model categoria {
  id_categoria Int       @id @default(autoincrement()) @db.UnsignedInt
  nome         String    @db.VarChar(50)
  id_desconto  Int?      @db.UnsignedInt
  desconto     desconto? @relation(fields: [id_desconto], references: [id_desconto], onDelete: Cascade, map: "id_desconto")
  produto      produto[]

  @@index([id_desconto], map: "id_desconto")
}

model cupom {
  id_cupom        Int             @id @default(autoincrement()) @db.UnsignedInt
  descricao       String?         @db.VarChar(128)
  data_criacao    DateTime        @default(now()) @db.Timestamp(0)
  quantidade_uso  Int?            @db.UnsignedInt
  codigo          String          @unique(map: "codigo") @db.VarChar(20)
  valor_desconto  Int             @db.UnsignedTinyInt
  tipo            cupom_tipo
  qtde_min_pedido Int             @default(0) @db.TinyInt
  data_inicio     DateTime?       @db.Timestamp(0)
  data_fim        DateTime?       @db.Timestamp(0)
  fidelidade      Boolean
  pedido          pedido[]
  usuario_cupom   usuario_cupom[]
}

model desconto {
  id_desconto          Int         @id @default(autoincrement()) @db.UnsignedInt
  porcentagem_desconto Int         @db.UnsignedTinyInt
  data_inicio          DateTime    @default(now()) @db.Timestamp(0)
  data_fim             DateTime?   @db.Timestamp(0)
  categoria            categoria[]
  produto              produto[]
}

model endereco {
  id_endereco Int      @id @default(autoincrement()) @db.UnsignedInt
  logradouro  String   @db.VarChar(50)
  numero      String   @db.VarChar(5)
  bairro      String   @db.VarChar(50)
  complemento String?  @db.VarChar(255)
  id_usuario  Int      @db.UnsignedInt
  id_entrega  Int      @default(1) @db.UnsignedInt
  entrega     entrega  @relation(fields: [id_entrega], references: [id_entrega], onUpdate: Restrict, map: "id_entrega")
  usuario     usuario  @relation(fields: [id_usuario], references: [id_usuario], onUpdate: Restrict, map: "id_usuario2")
  pedido      pedido[]

  @@index([id_entrega], map: "id_entrega")
  @@index([id_usuario], map: "id_usuario")
}

model entrega {
  id_entrega    Int        @id @default(autoincrement()) @db.UnsignedInt
  descricao     String?    @db.VarChar(128)
  preco_entrega Float      @db.Float
  endereco      endereco[]
}

model pedido {
  id_pedido                Int                        @id @default(autoincrement()) @db.UnsignedInt
  data_pedido              DateTime                   @default(now()) @db.Timestamp(0)
  data_confirmacao         DateTime?                  @db.Timestamp(0)
  status_pedido            pedido_status_pedido       @default(dbgenerated("(pendente)"))
  preco_entrega            Float?                     @db.Float
  tipo_entrega             pedido_tipo_entrega
  tipo_pagamento           pedido_tipo_pagamento
  troco_para               Float?                     @db.Float
  id_cupom                 Int?                       @db.UnsignedInt
  id_usuario               Int                        @db.UnsignedInt
  id_endereco              Int?                       @db.UnsignedInt
  cupom                    cupom?                     @relation(fields: [id_cupom], references: [id_cupom], onDelete: Cascade, map: "id_cupom")
  endereco                 endereco?                  @relation(fields: [id_endereco], references: [id_endereco], onDelete: Cascade, map: "id_endereco")
  usuario                  usuario                    @relation(fields: [id_usuario], references: [id_usuario], onDelete: Cascade, map: "id_usuario3")
  pedido_produto           pedido_produto[]
  pedido_produto_adicional pedido_produto_adicional[]
  pedido_produto_sabor     pedido_produto_sabor[]
  usuario_cupom            usuario_cupom[]

  @@index([id_cupom], map: "id_cupom")
  @@index([id_endereco], map: "id_endereco")
  @@index([id_usuario], map: "id_usuario")
}

model pedido_produto {
  id_pedido_produto        Int                        @id @default(autoincrement()) @db.UnsignedInt
  quantidade               Int                        @default(1) @db.UnsignedTinyInt
  preco_pedido             Float                      @db.Float
  observacao               String?                    @db.VarChar(100)
  id_pedido                Int                        @db.UnsignedInt
  id_produto               Int                        @db.UnsignedInt
  pedido                   pedido                     @relation(fields: [id_pedido], references: [id_pedido], onDelete: Cascade, map: "fk_pedido_produto_id_pedido")
  produto                  produto                    @relation(fields: [id_produto], references: [id_produto], onDelete: Cascade, map: "fk_pedido_produto_id_produto")
  pedido_produto_adicional pedido_produto_adicional[]
  pedido_produto_sabor     pedido_produto_sabor[]

  @@index([id_pedido], map: "id_pedido")
  @@index([id_produto], map: "id_produto")
}

model pedido_produto_adicional {
  id_pedido_produto Int            @db.UnsignedInt
  id_pedido         Int            @db.UnsignedInt
  id_produto        Int            @db.UnsignedInt
  id_adicional      Int            @db.UnsignedInt
  preco_adicional   Float          @db.Float
  adicional         adicional      @relation(fields: [id_adicional], references: [id_adicional], onDelete: Cascade, map: "fk_pedido_produto_adicional_id_adicional")
  pedido            pedido         @relation(fields: [id_pedido], references: [id_pedido], onDelete: Cascade, map: "fk_pedido_produto_adicional_id_pedido")
  pedido_produto    pedido_produto @relation(fields: [id_pedido_produto], references: [id_pedido_produto], onDelete: Cascade, map: "fk_pedido_produto_adicional_id_pedido_produto")
  produto           produto        @relation(fields: [id_produto], references: [id_produto], onDelete: Cascade, map: "fk_pedido_produto_adicional_id_produto")

  @@id([id_pedido_produto, id_pedido, id_produto, id_adicional])
  @@index([id_adicional], map: "id_adicional")
  @@index([id_pedido], map: "id_pedido")
  @@index([id_pedido_produto], map: "id_pedido_produto")
  @@index([id_produto], map: "id_produto")
}

model pedido_produto_sabor {
  id_pedido_produto Int            @db.UnsignedInt
  id_pedido         Int            @db.UnsignedInt
  id_produto        Int            @db.UnsignedInt
  id_sabor          Int            @db.UnsignedInt
  pedido            pedido         @relation(fields: [id_pedido], references: [id_pedido], onDelete: Cascade, map: "fk_pedido_produto_sabor_id_pedido")
  pedido_produto    pedido_produto @relation(fields: [id_pedido_produto], references: [id_pedido_produto], onDelete: Cascade, map: "fk_pedido_produto_sabor_id_pedido_produto")
  produto           produto        @relation(fields: [id_produto], references: [id_produto], onDelete: Cascade, map: "fk_pedido_produto_sabor_id_produto")
  sabor             sabor          @relation(fields: [id_sabor], references: [id_sabor], onDelete: Cascade, map: "fk_pedido_produto_sabor_id_sabor")

  @@id([id_pedido_produto, id_pedido, id_produto, id_sabor])
  @@index([id_pedido], map: "id_pedido")
  @@index([id_pedido_produto], map: "id_pedido_produto")
  @@index([id_produto], map: "id_produto")
  @@index([id_sabor], map: "id_sabor")
}

model produto {
  id_produto               Int                        @id @default(autoincrement()) @db.UnsignedInt
  uuid                     Bytes                      @db.Binary(16)
  nome_imagem              String?                    @db.VarChar(150)
  preco_padrao             Float                      @db.Float
  nome                     String                     @db.VarChar(50)
  disponivel               Boolean                    @default(true)
  descricao                String?                    @db.VarChar(255)
  tamanho                  String?                    @db.VarChar(50)
  qtde_max_sabor           Int?                       @db.UnsignedTinyInt
  id_categoria             Int                        @db.UnsignedInt
  id_desconto              Int?                       @db.UnsignedInt
  categoria                categoria                  @relation(fields: [id_categoria], references: [id_categoria], onDelete: Cascade, map: "fk_produto_id_categoria")
  desconto                 desconto?                  @relation(fields: [id_desconto], references: [id_desconto], onDelete: Cascade, map: "fk_produto_id_desconto")
  pedido_produto           pedido_produto[]
  pedido_produto_adicional pedido_produto_adicional[]
  pedido_produto_sabor     pedido_produto_sabor[]
  produto_adicional        produto_adicional[]
  produto_sabor            produto_sabor[]

  @@index([id_categoria], map: "id_categoria")
  @@index([id_desconto], map: "id_desconto")
}

model produto_sabor {
  id_produto Int     @db.UnsignedInt
  id_sabor   Int     @db.UnsignedInt
  produto    produto @relation(fields: [id_produto], references: [id_produto], onDelete: Cascade, map: "fk_produto_sabor_id_produto")
  sabor      sabor   @relation(fields: [id_sabor], references: [id_sabor], onDelete: Cascade, map: "fk_produto_sabor_id_sabor")

  @@id([id_produto, id_sabor])
  @@index([id_produto], map: "id_produto")
  @@index([id_sabor], map: "id_sabor")
}

model sabor {
  id_sabor             Int                    @id @default(autoincrement()) @db.UnsignedInt
  nome                 String                 @db.VarChar(100)
  pedido_produto_sabor pedido_produto_sabor[]
  produto_sabor        produto_sabor[]
}

model telefone {
  id_telefone Int     @id @default(autoincrement()) @db.UnsignedInt
  ddd         String  @db.VarChar(2)
  numero      String  @db.VarChar(9)
  id_usuario  Int     @db.UnsignedInt
  usuario     usuario @relation(fields: [id_usuario], references: [id_usuario], onDelete: Cascade, map: "id_usuario")

  @@index([id_usuario], map: "id_usuario")
}

model usuario {
  id_usuario      Int                 @id @default(autoincrement()) @db.UnsignedInt
  nome            String              @db.VarChar(128)
  data_nascimento DateTime            @db.DateTime(0)
  email           String              @unique(map: "email") @db.VarChar(50)
  data_criacao    DateTime            @default(now()) @db.Timestamp(0)
  autorizacao     usuario_autorizacao @default(dbgenerated("(cliente)"))
  senha           String              @db.VarChar(30)
  endereco        endereco[]
  pedido          pedido[]
  telefone        telefone[]
  usuario_cupom   usuario_cupom[]
}

model usuario_cupom {
  id_usuario_cupom Int       @id @default(autoincrement()) @db.UnsignedInt
  data_obtencao    DateTime  @default(now()) @db.Timestamp(0)
  data_uso         DateTime? @db.Timestamp(0)
  foi_usado        Boolean   @default(false)
  id_usuario       Int       @db.UnsignedInt
  id_cupom         Int       @db.UnsignedInt
  id_pedido        Int?      @db.UnsignedInt
  cupom            cupom     @relation(fields: [id_cupom], references: [id_cupom], onDelete: Cascade, map: "fk_usuario_cupom_id_cupom")
  pedido           pedido?   @relation(fields: [id_pedido], references: [id_pedido], onDelete: Cascade, map: "fk_usuario_cupom_id_pedido")
  usuario          usuario   @relation(fields: [id_usuario], references: [id_usuario], onDelete: Cascade, map: "fk_usuario_cupom_id_usuario")

  @@index([id_cupom], map: "id_cupom")
  @@index([id_pedido], map: "id_pedido")
  @@index([id_usuario], map: "id_usuario")
}

model produto_adicional {
  id_produto   Int       @db.UnsignedInt
  id_adicional Int       @db.UnsignedInt
  adicional    adicional @relation(fields: [id_adicional], references: [id_adicional], onDelete: Cascade, map: "fk_produto_adicional_id_adicional")
  produto      produto   @relation(fields: [id_produto], references: [id_produto], onDelete: Cascade, map: "fk_produto_adicional_id_produto")

  @@id([id_produto, id_adicional])
  @@index([id_adicional], map: "id_adicional")
  @@index([id_produto], map: "id_produto")
}

enum cupom_tipo {
  pedido
  entrega
}

enum pedido_status_pedido {
  rejeitado
  pendente
  confirmado
}

enum pedido_tipo_entrega {
  entrega
  balcao
}

enum pedido_tipo_pagamento {
  dinheiro
  credito
  debito
}

enum usuario_autorizacao {
  cliente
  administrador
}
